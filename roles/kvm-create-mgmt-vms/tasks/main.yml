---

- name: KVM | VM Creation | Grab a list of defined VMs
  shell: virsh list --all --name
  changed_when: false
  register: kvm_vm_list
  tags:
    - deploy_vim
    - kvm
    - vm_create

- name: KVM | VM Creation | Create the Images
  shell: |
      {% for disk in item.value.vm_disks %}
      {% if 'boot' in disk.name %}
      qemu-img create -f qcow2 -b "{{ item.value.vm_source_image }}" "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" "{{ disk.size }}"
      {% else %}
      qemu-img create -f qcow2 "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" "{{ disk.size }}"
      {% endif %}
      {% endfor %}
  with_dict: "{{ kvm_virtual_machines }}"
  when: item.value.vm_fqdn.split('.')[0] not in kvm_vm_list.stdout and ansible_hostname in item.value.vm_kvm_host
  tags:
    - deploy_vim
    - kvm
    - vm_create

- name: KVM | VM Creation | Check if guest1  Qcow Exists
  stat:
    path: "{{ kvm_storage_path}}/{{ guest1.split('.')[0]}}.qcow2"
  register: file
  tags:
    - deploy_vim
    - kvm
 
- name: KVM | VM Creation | Increase Filesystem size of guest1 
  shell: |
    virt-resize --expand /dev/sda1 "{{ rhel_base_image }}" "{{ item.value.vm_disks }}"
  with_dict: "{{ kvm_virtual_machines }}"
  when:
   - item.value.vm_fqdn.split('.')[0] not in kvm_vm_list.stdout
   - ansible_hostname in item.value.vm_kvm_host
   - file.stat.exists == true


- name: KVM | VM Creation | Prepare the Images      
  shell: |
      {% for disk in item.value.vm_disks %}
      {% if 'boot' in disk.name %}
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command "echo {{ item.value.vm_fqdn }} >/etc/hostname"
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command "echo > /etc/sysconfig/network-scripts/ifcfg-eth0"
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command 'echo DEVICE="eth0"  >> /etc/sysconfig/network-scripts/ifcfg-eth0'
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command 'echo ONBOOT="yes"  >> /etc/sysconfig/network-scripts/ifcfg-eth0'
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command 'echo NM_CONTROLLED="no"  >> /etc/sysconfig/network-scripts/ifcfg-eth0'      
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command 'echo TYPE="Ethernet"  >> /etc/sysconfig/network-scripts/ifcfg-eth0'
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command 'echo IPV6INIT="no"  >> /etc/sysconfig/network-scripts/ifcfg-eth0'
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command "echo IPADDR={{ item.value.vm_ip }}  >> /etc/sysconfig/network-scripts/ifcfg-eth0"
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command "echo NETMASK={{ item.value.vm_netmask }} >> /etc/sysconfig/network-scripts/ifcfg-eth0"
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command "echo GATEWAY={{ item.value.vm_gateway }} >> /etc/sysconfig/network-scripts/ifcfg-eth0"
      {% endif %}
      {% endfor %}          
  with_dict: "{{ kvm_virtual_machines }}"
  when: item.value.vm_fqdn.split('.')[0] not in kvm_vm_list.stdout and ansible_hostname in item.value.vm_kvm_host
  tags:
    - deploy_vim
    - kvm
    - vm_create

- name: KVM | VM Creation | Insert Ansible SSH Key if we are not using a gold image
  shell: |
      {% for disk in item.value.vm_disks %}
      {% if 'boot' in disk.name %}
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --uninstall cloud-init
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command "sed -i s/^SELINUX=.*$/SELINUX=permissive/ /etc/selinux/config"
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command "useradd ansible --create-home --password '$1$7o.RlkmQ$oYo5b4x5.UJs9Vv5D0SbU.'"
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command "usermod --groups wheel ansible"
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command "mkdir -p /home/ansible/.ssh"
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command "echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDL800bKiu5BRMkbtmVT9ellfBdfnKZ36cc89QbiNH700ZHM7f0hx3ispjUNYTi/KExZTcCxxG2hWOsa3A2MfLUYF4IpjPX/8LycyE3PEnB4PNbUUwG/tNnWn0Joe9AuyeUWOxXdnNzJcalnctFaoSzFbhRnMdfznxxw/PPPNnbAJbjmBP/qmKQoSe5R3ebmUcQPtItTVW1U9CKAcstua3i5OJV/2O00Mx63dan1lBrLvVht8o+/kXQd/8ktcIYf+bWrGkIUcYCZq0hCkGPy5W3MZE41e4EdcNZg1lrSXvQR5aeW7tUbENwN+f+nfWi9J9rm/D3JqmKk1WABR9/XI8F ansible@ansibletower.redhat.ribu1.com' >> /home/ansible/.ssh/authorized_keys"
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command "chmod 600 /home/ansible/.ssh/authorized_keys"
      virt-customize -a "{{ kvm_storage_path }}/{{ disk.name }}.qcow2" --run-command "chown -R ansible /home/ansible/.ssh"
      {% endif %}
      {% endfor %}
  with_dict: "{{ kvm_virtual_machines }}"
  when: item.value.vm_fqdn.split('.')[0] not in kvm_vm_list.stdout and ansible_hostname in item.value.vm_kvm_host and item.value.vm_source_image != kvm_gold_image 
  tags:
    - deploy_vim
    - kvm
    - vm_create
 
   
